// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
      And(a=instruction[3], b=instruction[15], out=writeM); // p70, instruction[3]が1はMに書き込み。instruction[15]が1は計算命令
      And(a=instruction[4], b=instruction[15], out=loadD); // p70, instruction[4]が1はDに書き込み。
      Not(in=instruction[15], out=notin15);
      Or(a=instruction[5], b=notin15, out=loadA);

      Mux16(a=instruction, b=aluout, sel=instruction[15], out=mux0out);
      ARegister(in=mux0out, load=loadA, out=aout, out[0..14]=addressM);
      PC(in=aout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
      Mux16(a=aout, b=inM, sel=instruction[12], out=mux1out); // p71, instruction[12]が0 → Aを使用、1 → Mを使用
      DRegister(in=aluout, load=loadD, out=dout);

      ALU(
        x=dout,
        y=mux1out,
        zx=instruction[11],
        nx=instruction[10], // ???
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout,
        out=outM,
        zr=zr,
        ng=ng
      );

      Not(in=zr, out=notzr);
      Not(in=ng, out=notng);
      And(a=instruction[1], b=zr, out=outJump1);
      And(a=instruction[2], b=ng, out=outJump2);
      Or(a=outJump1, b=outJump2, out=outJump1or2);
      And(a=notzr, b=notng, out=outPositive);
      And(a=instruction[0], b=outPositive, out=outJump0);
      Or(a=outJump0, b=outJump1or2, out=outJump);
      And(a=instruction[15], b=outJump, out=loadPC);
}